// ===========================================
// SCRIPT DE INICIALIZA√á√ÉO - PRODU√á√ÉO
// ===========================================

print('üöÄ Inicializando MongoDB para PRODU√á√ÉO...');

// Criar usu√°rio de produ√ß√£o
db = db.getSiblingDB('app_production');

db.createUser({
  user: 'prod_user',
  pwd: 'prod_super_secure_password789',
  roles: [
    {
      role: 'readWrite',
      db: 'app_production'
    }
  ]
});

print('‚úÖ Usu√°rio de produ√ß√£o criado!');

// Criar cole√ß√µes com configura√ß√µes de produ√ß√£o
db.createCollection('users', {
  validator: {
    $jsonSchema: {
      bsonType: 'object',
      required: ['name', 'email', 'age'],
      properties: {
        name: {
          bsonType: 'string',
          description: 'Nome √© obrigat√≥rio e deve ser string'
        },
        email: {
          bsonType: 'string',
          pattern: '^.+@.+$',
          description: 'Email deve ter formato v√°lido'
        },
        age: {
          bsonType: 'int',
          minimum: 0,
          maximum: 150,
          description: 'Idade deve ser um n√∫mero entre 0 e 150'
        }
      }
    }
  }
});

db.createCollection('logs');
db.createCollection('audit');
db.createCollection('metrics');

print('üìä Cole√ß√µes criadas com valida√ß√£o!');

// Criar √≠ndices otimizados para produ√ß√£o
db.users.createIndex({ email: 1 }, { unique: true });
db.users.createIndex({ created_at: -1 });
db.users.createIndex({ name: 'text', email: 'text' });

db.logs.createIndex({ timestamp: -1 });
db.audit.createIndex({ action: 1, timestamp: -1 });

print('üîç √çndices otimizados criados!');

// N√ÉO inserir dados de teste em produ√ß√£o
print('‚ö†Ô∏è  Nenhum dado de teste inserido em produ√ß√£o');
print('üéØ Inicializa√ß√£o do MongoDB para PRODU√á√ÉO conclu√≠da!');

// Log de configura√ß√£o
db.logs.insertOne({
  environment: 'production',
  action: 'database_initialized',
  timestamp: new Date(),
  message: 'MongoDB inicializado para ambiente de produ√ß√£o',
  security_level: 'high'
});